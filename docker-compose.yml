version: '3.8'

services:
  # MongoDB database
  mongodb:
    image: mongo:7.0
    container_name: shipping-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: shipping_line
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - shipping-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: shipping-server
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGO_URI: mongodb://admin:password123@mongodb:27017/shipping_line?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      BCRYPT_ROUNDS: 12
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX: 100
      CLIENT_PORT: 5173
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - shipping-network
    volumes:
      - server_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: shipping-client
    restart: unless-stopped
    ports:
      - "5173:80"
    environment:
      VITE_API_URL: http://server:5000
    depends_on:
      - server
    networks:
      - shipping-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: shipping-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - client
      - server
    networks:
      - shipping-network

volumes:
  mongodb_data:
    driver: local
  server_logs:
    driver: local

networks:
  shipping-network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
version: '3.8'

services:
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    environment:
      NODE_ENV: development
    volumes:
      - ./server/src:/app/src:ro
      - server_node_modules:/app/node_modules
    command: npm run dev

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./client/src:/app/src:ro
      - client_node_modules:/app/node_modules
    command: npm run dev

volumes:
  server_node_modules:
  client_node_modules:
